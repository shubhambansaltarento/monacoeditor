[
  {
    "label": "main",
    "kind": "Snippet",
    "insertText": "#include <stdio.h>\n\nint main() {\n\t${1:// code}\n\treturn 0;\n}",
    "documentation": "Main function template",
    "category": "main"
  },
  {
    "label": "include",
    "kind": "Snippet",
    "insertText": "#include <${1:header}>",
    "documentation": "Include header file",
    "category": "preprocessor"
  },
  {
    "label": "printf",
    "kind": "Function",
    "insertText": "printf(\"${1:format}\\n\", ${2:args});",
    "documentation": "Print formatted output to stdout",
    "category": "io"
  },
  {
    "label": "scanf",
    "kind": "Function",
    "insertText": "scanf(\"${1:format}\", &${2:variable});",
    "documentation": "Read formatted input from stdin",
    "category": "io"
  },
  {
    "label": "for loop",
    "kind": "Snippet",
    "insertText": "for (int ${1:i} = 0; ${1:i} < ${2:n}; ${1:i}++) {\n\t${3:// loop body}\n}",
    "documentation": "For loop",
    "category": "control"
  },
  {
    "label": "while loop",
    "kind": "Snippet",
    "insertText": "while (${1:condition}) {\n\t${2:// loop body}\n}",
    "documentation": "While loop",
    "category": "control"
  },
  {
    "label": "do-while loop",
    "kind": "Snippet",
    "insertText": "do {\n\t${1:// loop body}\n} while (${2:condition});",
    "documentation": "Do-while loop",
    "category": "control"
  },
  {
    "label": "if statement",
    "kind": "Snippet",
    "insertText": "if (${1:condition}) {\n\t${2:// code}\n}",
    "documentation": "If statement",
    "category": "control"
  },
  {
    "label": "if-else statement",
    "kind": "Snippet",
    "insertText": "if (${1:condition}) {\n\t${2:// if code}\n} else {\n\t${3:// else code}\n}",
    "documentation": "If-else statement",
    "category": "control"
  },
  {
    "label": "switch statement",
    "kind": "Snippet",
    "insertText": "switch (${1:variable}) {\n\tcase ${2:value1}:\n\t\t${3:// code}\n\t\tbreak;\n\tcase ${4:value2}:\n\t\t${5:// code}\n\t\tbreak;\n\tdefault:\n\t\t${6:// default code}\n\t\tbreak;\n}",
    "documentation": "Switch statement",
    "category": "control"
  },
  {
    "label": "function definition",
    "kind": "Snippet",
    "insertText": "${1:int} ${2:function_name}(${3:parameters}) {\n\t${4:// function body}\n\treturn ${5:value};\n}",
    "documentation": "Function definition",
    "category": "functions"
  },
  {
    "label": "void function",
    "kind": "Snippet",
    "insertText": "void ${1:function_name}(${2:parameters}) {\n\t${3:// function body}\n}",
    "documentation": "Void function definition",
    "category": "functions"
  },
  {
    "label": "struct definition",
    "kind": "Snippet",
    "insertText": "struct ${1:name} {\n\t${2:// struct members}\n};",
    "documentation": "Structure definition",
    "category": "types"
  },
  {
    "label": "typedef struct",
    "kind": "Snippet",
    "insertText": "typedef struct {\n\t${1:// struct members}\n} ${2:TypeName};",
    "documentation": "Typedef structure definition",
    "category": "types"
  },
  {
    "label": "enum definition",
    "kind": "Snippet",
    "insertText": "enum ${1:name} {\n\t${2:VALUE1, VALUE2}\n};",
    "documentation": "Enumeration definition",
    "category": "types"
  },
  {
    "label": "malloc",
    "kind": "Function",
    "insertText": "${1:type} *${2:ptr} = (${1:type}*)malloc(sizeof(${1:type}) * ${3:count});",
    "documentation": "Dynamic memory allocation",
    "category": "memory"
  },
  {
    "label": "calloc",
    "kind": "Function",
    "insertText": "${1:type} *${2:ptr} = (${1:type}*)calloc(${3:count}, sizeof(${1:type}));",
    "documentation": "Zero-initialized memory allocation",
    "category": "memory"
  },
  {
    "label": "realloc",
    "kind": "Function",
    "insertText": "${1:ptr} = (${2:type}*)realloc(${1:ptr}, sizeof(${2:type}) * ${3:new_count});",
    "documentation": "Resize allocated memory",
    "category": "memory"
  },
  {
    "label": "free",
    "kind": "Function",
    "insertText": "free(${1:ptr});\n${1:ptr} = NULL;",
    "documentation": "Free allocated memory",
    "category": "memory"
  },
  {
    "label": "array declaration",
    "kind": "Snippet",
    "insertText": "${1:int} ${2:array}[${3:size}];",
    "documentation": "Array declaration",
    "category": "arrays"
  },
  {
    "label": "array initialization",
    "kind": "Snippet",
    "insertText": "${1:int} ${2:array}[] = {${3:1, 2, 3}};",
    "documentation": "Array initialization with values",
    "category": "arrays"
  },
  {
    "label": "pointer declaration",
    "kind": "Snippet",
    "insertText": "${1:int} *${2:ptr} = &${3:variable};",
    "documentation": "Pointer declaration and initialization",
    "category": "pointers"
  },
  {
    "label": "file open",
    "kind": "Function",
    "insertText": "FILE *${1:file} = fopen(\"${2:filename}\", \"${3:mode}\");",
    "documentation": "Open file for reading/writing",
    "category": "files"
  },
  {
    "label": "file close",
    "kind": "Function",
    "insertText": "fclose(${1:file});",
    "documentation": "Close file",
    "category": "files"
  },
  {
    "label": "define constant",
    "kind": "Snippet",
    "insertText": "#define ${1:CONSTANT_NAME} ${2:value}",
    "documentation": "Define preprocessor constant",
    "category": "preprocessor"
  },
  {
    "label": "variable declaration",
    "kind": "Snippet",
    "insertText": "${1:int} ${2:variable} = ${3:value};",
    "documentation": "Variable declaration and initialization",
    "category": "variables"
  },
  {
    "label": "const variable",
    "kind": "Snippet",
    "insertText": "const ${1:int} ${2:variable} = ${3:value};",
    "documentation": "Constant variable declaration",
    "category": "variables"
  }
]